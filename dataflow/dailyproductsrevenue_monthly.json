{
	"name": "dailyproductsrevenue_monthly",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "orderscsv",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "orderitems",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ordersparquet_monthly",
						"type": "DatasetReference"
					},
					"name": "sink1",
					"rejectedDataLinkedService": {
						"referenceName": "orders",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "filter1"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				}
			],
			"scriptLines": [
				"parameters{",
				"     order_month as string ('201308')",
				"}",
				"source(output(",
				"          order_id as integer,",
				"          { order_date} as timestamp,",
				"          { order_customer_id} as integer,",
				"          { order_status} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          {order_item_id } as integer,",
				"          order_item_order_id as integer,",
				"          order_item_product_id as integer,",
				"          {order_item_quantity } as integer,",
				"          order_item_subtotal as float,",
				"          order_item_product_price as float",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source2",
				"source1 filter(in(['COMPLETE','CLOSED'], { order_status})&&toString(toDate({ order_date}),'yyyyMM') == $order_month) ~> filter1",
				"filter1, source2 join(order_id == {order_item_id },",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy({ order_date},",
				"          order_item_order_id),",
				"     revenue = round(sum(order_item_subtotal),2)) ~> aggregate1",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     mapColumn(",
				"          order_item_order_id,",
				"          revenue,",
				"          date = { order_date}",
				"     ),",
				"     partitionBy('roundRobin', 2)) ~> sink1"
			]
		}
	}
}